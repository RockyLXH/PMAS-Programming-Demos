#include <stdio.h>
#include <rpc/rpc.h>        /* always needed */
#include "MMC_Definitions.h"
#include "mmcpplib.h"
#include "msg.h"            /* msg.h will be generated by rpcgen */
#include "ElmoMaestroSIL_XML.h"
#include "ElmoMaestroSIL_CAPI.h"
/*
 * Remote version of "printmessage"
 */

////////////////////////////////////////////////////////////////////////////////
/// \fn sil_xml_getCompTimeFromFile(char compilationTIme[100])
/// \brief  return compilation time and date from header in file Simulink.XML
///	\param compilationTIme - hold the value in case file exist
/// \return	return - 0 - in case of OK
///					 -1 - in case of error .
///
////////////////////////////////////////////////////////////////////////////////
//char ** getCompdate(char **msg, CLIENT *req)
//{
//	static char *cGetdateRes;       /* must be static! */
//	cGetdateRes = new char[100];
//
//	sil_xml_getCompilationTime(cGetdateRes);
//
//    return(&cGetdateRes);
//}

sil_get_compilation_date_out * getCompdate(sil_get_compilation_date_in *msg, CLIENT *req)
{
	static sil_get_compilation_date_out result;
	result.iErrorId = sil_xml_getCompilationTime(result.str);

	if(g_ucDebugMode)
	{
		printf("%s: result.str = %s\n", __func__, result.str);
	}

    return(&result);
}

////////////////////////////////////////////////////////////////////////////////
/// \fn sil_getCompDateFromXML(char compilationTIme[100])
/// \brief  return compilation time and date from header in file Simulink.XML
///	\param compilationTIme - hold the value in case file exist
/// \return	return - 0 - in case of OK
///					 -1 - in case of error .
///
////////////////////////////////////////////////////////////////////////////////
sil_get_compilation_date_out * sil_getCompDateFromXML(sil_get_compilation_date_in *msg, CLIENT *req)
{
	static sil_get_compilation_date_out result;

//	result.iErrorId = sil_xml_getCompilationTimeFromXMLFile(SIMULINK_XML_PATH,result.str);
	result.iErrorId = sil_xml_getCompilationTimeFromXMLFileEX(SIMULINK_XML_PATH,result.str);
    return(&result);
}


////////////////////////////////////////////////////////////////////////////////
/// \fn sil_setParameterDouble
/// \brief Server interface to set value of tunable parameter type double
///	\param uiParameterID - parameter ID
///	\param uiParameterID - parameter Value
/// \return	return - sil_set_parameter_out
///
///
////////////////////////////////////////////////////////////////////////////////
sil_set_parameter_out * sil_setParameterDouble(sil_set_parameter_double_in *msgIn, CLIENT *req)
{
	static sil_set_parameter_out result;       /* must be static! */
	result.sStatus = NC_OK;
	result.iErrorId = sil_capi_set_parameter_double(msgIn->iParamID, msgIn->dParamValue);
    return(&result);
}

////////////////////////////////////////////////////////////////////////////////
/// \fn sil_setParameterInt
/// \brief Server interface to set value of tunable parameter type int
///	\param uiParameterID - parameter ID
///	\param uiParameterID - parameter Value
/// \return	return - sil_set_parameter_out
///
///
////////////////////////////////////////////////////////////////////////////////
sil_set_parameter_out * sil_setParameterInt(sil_set_parameter_int_in *msgIn, CLIENT *req)
{
	static sil_set_parameter_out result;       /* must be static! */
	result.sStatus = NC_OK;
	result.iErrorId = sil_capi_set_parameter_int(msgIn->iParamID, msgIn->iParamValue);
    return(&result);
}

////////////////////////////////////////////////////////////////////////////////
/// \fn sil_setParameterUInt
/// \brief Server interface to set value of tunable parameter type unsigned int
///	\param uiParameterID - parameter ID
///	\param uiParameterID - parameter Value
/// \return	return - sil_set_parameter_out
///
///
////////////////////////////////////////////////////////////////////////////////
sil_set_parameter_out * sil_setParameterUInt(sil_set_parameter_uint_in *msgIn, CLIENT *req)
{
	static sil_set_parameter_out result;       /* must be static! */
	result.sStatus = NC_OK;
	result.iErrorId = sil_capi_set_parameter_uint(msgIn->iParamID, msgIn->uiParamValue);
    return(&result);
}

////////////////////////////////////////////////////////////////////////////////
/// \fn sil_setParameterShort
/// \brief Server interface to set value of tunable parameter type short
///	\param sil_set_parameter_short_in
/// \return	return - sil_set_parameter_out
///
///
////////////////////////////////////////////////////////////////////////////////
sil_set_parameter_out * sil_setParameterShort(sil_set_parameter_short_in *msgIn, CLIENT *req)
{
	static sil_set_parameter_out result;       /* must be static! */
	result.sStatus = NC_OK;
	result.iErrorId = sil_capi_set_parameter_short(msgIn->iParamID, msgIn->sParamValue);
    return(&result);
}

////////////////////////////////////////////////////////////////////////////////
/// \fn sil_setParameterUShort
/// \brief Server interface to set value of tunable parameter type unsigned short
///	\param sil_set_parameter_ushort_in
/// \return	return - sil_set_parameter_out
///
///
////////////////////////////////////////////////////////////////////////////////
sil_set_parameter_out * sil_setParameterUShort(sil_set_parameter_ushort_in *msgIn, CLIENT *req)
{
	static sil_set_parameter_out result;       /* must be static! */
	result.sStatus = NC_OK;
	result.iErrorId = sil_capi_set_parameter_ushort(msgIn->iParamID, msgIn->usParamValue);
    return(&result);
}

////////////////////////////////////////////////////////////////////////////////
/// \fn sil_setParameterChar
/// \brief Server interface to set value of tunable parameter type  char
///	\param sil_set_parameter_char_in
/// \return	return - sil_set_parameter_out
///
///
////////////////////////////////////////////////////////////////////////////////
sil_set_parameter_out * sil_setParameterChar(sil_set_parameter_char_in *msgIn, CLIENT *req)
{
	static sil_set_parameter_out result;       /* must be static! */
	result.sStatus = NC_OK;
	result.iErrorId = sil_capi_set_parameter_char(msgIn->iParamID, msgIn->cParamValue);
    return(&result);
}

////////////////////////////////////////////////////////////////////////////////
/// \fn sil_setParameterUChar
/// \brief Server interface to set value of tunable parameter type unsigned char
///	\param sil_set_parameter_char_in
/// \return	return - sil_set_parameter_out
///
///
////////////////////////////////////////////////////////////////////////////////
sil_set_parameter_out * sil_setParameterUChar(sil_set_parameter_uchar_in *msgIn, CLIENT *req)
{
	static sil_set_parameter_out result;       /* must be static! */
	result.sStatus = NC_OK;
	result.iErrorId = sil_capi_set_parameter_char(msgIn->iParamID, msgIn->ucParamValue);
    return(&result);
}


////////////////////////////////////////////////////////////////////////////////
/// \fn sil_CreateXML
/// \brief Server interface to create Simulink.XML file.
///	\param
/// \return	return - None
///
///
////////////////////////////////////////////////////////////////////////////////
sil_create_xml_out * sil_CreateXML(sil_create_xml_in *msgIn, CLIENT *req)
{
	static sil_create_xml_out result;       /* must be static! */
	sil_capi_create_xml();
	result.iErrorId = 0;
    return(&result);
}

////////////////////////////////////////////////////////////////////////////////
/// \fn sil_loadParamFromXML
/// \brief Server interface to set parameters value according to XML file SimulinkParamDef.xml
///	\param uiParameterID - parameter ID
/// \return	return - None
///
///
////////////////////////////////////////////////////////////////////////////////
sil_load_param_from_xml_out * sil_loadParamFromXML(sil_load_param_from_xml_in *msgIn, CLIENT *req)
{
	static sil_load_param_from_xml_out result;       /* must be static! */
	result.iErrorId = sil_capi_set_parameters_from_file();
    return(&result);
}

////////////////////////////////////////////////////////////////////////////////
/// \fn sil_getParameterDouble
/// \brief Server interface to get value of tunable parameter type double
///	\param uiParameterID - parameter ID
///	\param uiParameterID - parameter Value
/// \return	return - sil_get_parameter_double_out
///
///
////////////////////////////////////////////////////////////////////////////////
sil_get_parameter_double_out * sil_getParameterDouble(sil_get_parameter_in *msgIn, CLIENT *req)
{
	static sil_get_parameter_double_out result;       /* must be static! */
	result.iErrorId = sil_capi_get_parameter_double(msgIn->iParmaId, result.dParmaValue);
    return(&result);
}

////////////////////////////////////////////////////////////////////////////////
/// \fn sil_getParameterInt
/// \brief Server interface to get value of tunable parameter type int
///	\param uiParameterID - parameter ID
///	\param uiParameterID - parameter Value
/// \return	return - sil_get_parameter_int_out
///
///
////////////////////////////////////////////////////////////////////////////////
sil_get_parameter_int_out * sil_getParameterInt(sil_get_parameter_in *msgIn, CLIENT *req)
{
	static sil_get_parameter_int_out result;       /* must be static! */
	result.iErrorId = sil_capi_get_parameter_int(msgIn->iParmaId, result.iParmaValue);
    return(&result);
}

////////////////////////////////////////////////////////////////////////////////
/// \fn sil_getParameterInt
/// \brief Server interface to get value of tunable parameter type unsigned int
///	\param uiParameterID - parameter ID
///	\param uiParameterID - parameter Value
/// \return	sil_get_parameter_uint_out
///
///
////////////////////////////////////////////////////////////////////////////////
sil_get_parameter_uint_out * sil_getParameterUInt(sil_get_parameter_in *msgIn, CLIENT *req)
{
	static sil_get_parameter_uint_out result;       /* must be static! */
	result.iErrorId = sil_capi_get_parameter_uint(msgIn->iParmaId, result.uiParmaValue);
    return(&result);
}

////////////////////////////////////////////////////////////////////////////////
/// \fn sil_getParameterShort
/// \brief Server interface to get value of tunable parameter type short
///	\param uiParameterID - parameter ID
///	\param uiParameterID - parameter Value
/// \return	sil_get_parameter_short_out
///
///
////////////////////////////////////////////////////////////////////////////////
sil_get_parameter_short_out * sil_getParameterShort(sil_get_parameter_in *msgIn, CLIENT *req)
{
	static sil_get_parameter_short_out result;       /* must be static! */
	result.iErrorId = sil_capi_get_parameter_short(msgIn->iParmaId, result.sParmaValue);
    return(&result);
}

////////////////////////////////////////////////////////////////////////////////
/// \fn sil_getParameterUShort
/// \brief Server interface to get value of tunable parameter type unsigned short
///	\param uiParameterID - parameter ID
///	\param uiParameterID - parameter Value
/// \return	sil_get_parameter_ushort_out
///
///
////////////////////////////////////////////////////////////////////////////////
sil_get_parameter_ushort_out * sil_getParameterUShort(sil_get_parameter_in *msgIn, CLIENT *req)
{
	static sil_get_parameter_ushort_out result;       /* must be static! */
	result.iErrorId = sil_capi_get_parameter_ushort(msgIn->iParmaId, result.usParmaValue);
    return(&result);
}

////////////////////////////////////////////////////////////////////////////////
/// \fn sil_getParameterChar
/// \brief Server interface to get value of tunable parameter type char
///	\param uiParameterID - parameter ID
///	\param uiParameterID - parameter Value
/// \return	sil_get_parameter_char_out
///
///
////////////////////////////////////////////////////////////////////////////////
sil_get_parameter_char_out * sil_getParameterChar(sil_get_parameter_in *msgIn, CLIENT *req)
{
	static sil_get_parameter_char_out result;       /* must be static! */
	result.iErrorId = sil_capi_get_parameter_char(msgIn->iParmaId, result.cParmaValue);
    return(&result);
}

////////////////////////////////////////////////////////////////////////////////
/// \fn sil_getParameterUChar
/// \brief Server interface to get value of tunable parameter type unsigned char
///	\param uiParameterID - parameter ID
///	\param uiParameterID - parameter Value
/// \return	sil_get_parameter_uchar_out
///
///
////////////////////////////////////////////////////////////////////////////////
sil_get_parameter_uchar_out * sil_getParameterUChar(sil_get_parameter_in *msgIn, CLIENT *req)
{
	static sil_get_parameter_uchar_out result;       /* must be static! */
	result.iErrorId = sil_capi_get_parameter_uchar(msgIn->iParmaId, result.ucParmaValue);
    return(&result);
}

////////////////////////////////////////////////////////////////////////////////
/// \fn sil_getParameterBool
/// \brief Server interface to get value of tunable parameter type bool
///	\param uiParameterID - parameter ID
///	\param uiParameterID - parameter Value
/// \return	sil_get_parameter_bool_out
///
///
////////////////////////////////////////////////////////////////////////////////
sil_get_parameter_bool_out * sil_getParameterBool(sil_get_parameter_in *msgIn, CLIENT *req)
{
	static sil_get_parameter_bool_out result;       /* must be static! */
	result.iErrorId = sil_capi_get_parameter_bool(msgIn->iParmaId, result.bParmaValue);
    return(&result);
}


////////////////////////////////////////////////////////////////////////////////
/// \fn sil_getOverFlow
/// \brief Server interface to get value of tunable parameter type int
///	\param uiParameterID - parameter ID
///	\param uiParameterID - parameter Value
/// \return	return - sil_get_parameter_int_out
///
///
////////////////////////////////////////////////////////////////////////////////
sil_get_parameter_long_out * sil_getOverflow(sil_get_overflow_in *msgIn, CLIENT *req)
{
	static sil_get_parameter_long_out result;       /* must be static! */
//	result.iErrorId = sil_capi_get_parameter_int(msgIn->iParmaId, result.lParmaValue);
	result.iErrorId =  sil_capi_get_overflow( result.lParmaValue);
    return(&result);
}

////////////////////////////////////////////////////////////////////////////////
/// \fn sil_getElapsedTime
/// \brief Server interface to get value of tunable parameter type double
///	\param uiParameterID - parameter ID
///	\param uiParameterID - parameter Value
/// \return	return - sil_get_parameter_double_out
///
///
////////////////////////////////////////////////////////////////////////////////
sil_get_TimeMeasurement_out * sil_getTimeMeasurement(sil_get_TimeMeasurement_in *msgIn, CLIENT *req)
{
	static sil_get_TimeMeasurement_out result;       /* must be static! */
	result.iErrorId = sil_capi_get_TimeMeasurement(result.ulElapsedTime,result.ulMaxElapsedTime,result.ulAvgElapsedTime,result.lOverflow);
    return(&result);
}

////////////////////////////////////////////////////////////////////////////////
/// \fn sil_getElapsedTime
/// \brief Server interface to get value of tunable parameter type double
///	\param uiParameterID - parameter ID
///	\param uiParameterID - parameter Value
/// \return	return - sil_get_parameter_double_out
///
///
////////////////////////////////////////////////////////////////////////////////
sil_get_parameter_double_out * sil_geMaxtElapsedTime(sil_get_parameter_in *msgIn, CLIENT *req)
{
	static sil_get_parameter_double_out result;       /* must be static! */
	result.iErrorId = sil_capi_get_MaxElapsedTime(msgIn->iParmaId, result.dParmaValue);
    return(&result);
}

////////////////////////////////////////////////////////////////////////////////
/// \fn sil_stopexe
/// \brief Server interface to get value of tunable parameter type double
///	\param uiParameterID - parameter ID
///	\param uiParameterID - parameter Value
/// \return	return - sil_get_parameter_double_out
///
///
////////////////////////////////////////////////////////////////////////////////
sil_stop_exe_out * sil_stopexe(sil_stop_exe_in *msgIn, CLIENT *req)
{
	static sil_stop_exe_out result;       /* must be static! */
	result.iErrorId = sil_capi_stopexec();
    return(&result);
}

////////////////////////////////////////////////////////////////////////////////
/// \fn sil_savelog
/// \brief Server interface to call MATLAB save logger function
///	\param uiParameterID - parameter ID
///	\param uiParameterID - parameter Value
/// \return	return - sil_get_parameter_double_out
///
///
////////////////////////////////////////////////////////////////////////////////
sil_save_log_out * sil_savelog(sil_save_log_in *msgIn, CLIENT *req)
{
	static sil_save_log_out result;       /* must be static! */
	result.iErrorId = sil_capi_savelog();
    return(&result);
}

sil_start_rec_out * sil_startrec(sil_start_rec_in *msgIn, CLIENT *req)
{
	static sil_start_rec_out result;       /* must be static! */
	result.iErrorId = sil_capi_startrec();
    return(&result);
}

sil_stop_rec_out * sil_stoprec(sil_stop_rec_in *msgIn, CLIENT *req)
{
	static sil_stop_rec_out result;       /* must be static! */
	result.iErrorId = sil_capi_stoprec();
    return(&result);
}

sil_rec_stat_out * sil_recstat(sil_rec_stat_in *msgIn, CLIENT *req)
{
	static sil_rec_stat_out result;       /* must be static! */
	result.iErrorId = sil_capi_recstat(result.ucParmaValue);
    return(&result);
}


test_parameter_out * testparam(test_parameter_in *msgIn, CLIENT *clnt)
{
	static test_parameter_out result;       /* must be static! */

    return(&result);
}

int * arrayTst(char *msgIn, CLIENT *req)
{
	fprintf(stderr,"array tset\n");
	static int result;       /* must be static! */
//	sil_capi_get_parameter(msgIn->iParmaId, result.dParmaValue);
    return(&result);
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//decoding function
///
bool_t xdr_silSetParameterDouble_in (XDR *__xdrs, sil_set_parameter_double_in *__testxdr_silSetParamIn){
	int rc;
	rc  = xdr_int(__xdrs, &__testxdr_silSetParamIn->iParamID);
	rc = rc && xdr_double(__xdrs, &__testxdr_silSetParamIn->dParamValue);
	return rc;
};

bool_t xdr_silSetParameterInt_in (XDR *__xdrs, sil_set_parameter_int_in *__testxdr_silSetParamIn){
	int rc;
	rc  = xdr_int(__xdrs, &__testxdr_silSetParamIn->iParamID);
	rc = rc && xdr_int(__xdrs, &__testxdr_silSetParamIn->iParamValue);
	return rc;
};

bool_t xdr_silSetParameterUInt_in (XDR *__xdrs, sil_set_parameter_uint_in *__testxdr_silSetParamIn){
	int rc;
	rc  = xdr_int(__xdrs, &__testxdr_silSetParamIn->iParamID);
	rc = rc && xdr_u_int(__xdrs, &__testxdr_silSetParamIn->uiParamValue);
	return rc;
};

bool_t xdr_silSetParameterShort_in (XDR *__xdrs, sil_set_parameter_short_in *__testxdr_silSetParamIn){
	int rc;
	rc  = xdr_int(__xdrs, &__testxdr_silSetParamIn->iParamID);
	rc = rc && xdr_short(__xdrs, &__testxdr_silSetParamIn->sParamValue);
	return rc;
};
bool_t xdr_silSetParameterUShort_in (XDR *__xdrs, sil_set_parameter_ushort_in *__testxdr_silSetParamIn){
	int rc;
	rc  = xdr_int(__xdrs, &__testxdr_silSetParamIn->iParamID);
	rc = rc && xdr_u_short(__xdrs, &__testxdr_silSetParamIn->usParamValue);
	return rc;
};
bool_t xdr_silSetParameterChar_in (XDR *__xdrs, sil_set_parameter_char_in *__testxdr_silSetParamIn){
	int rc;
	rc  = xdr_int(__xdrs, &__testxdr_silSetParamIn->iParamID);
	rc = rc && xdr_int8_t(__xdrs, (int8_t *)&__testxdr_silSetParamIn->cParamValue);
	return rc;
};
bool_t xdr_silSetParameterUChar_in (XDR *__xdrs, sil_set_parameter_uchar_in *__testxdr_silSetParamIn){
	int rc;
	rc  = xdr_int(__xdrs, &__testxdr_silSetParamIn->iParamID);
	rc = rc && xdr_uint8_t(__xdrs, &__testxdr_silSetParamIn->ucParamValue);
	return rc;
};

bool_t xdr_silSetParameter_out (XDR *__xdrs, sil_set_parameter_out *__testxdr_silSetParamOut){
	 return (xdr_short(__xdrs, &__testxdr_silSetParamOut->sStatus) && xdr_int(__xdrs, &__testxdr_silSetParamOut->iErrorId));
};

bool_t xdr_silCreateXML_in (XDR *__xdrs, sil_create_xml_in *__testxdr_silCreateXMLIn){
	return (xdr_uint8_t(__xdrs, &__testxdr_silCreateXMLIn->ucDummy));
}
bool_t xdr_silCreateXML_out (XDR *__xdrs, sil_create_xml_out *__testxdr_silSetParamOut){
	 return (xdr_short(__xdrs, &__testxdr_silSetParamOut->sStatus) && xdr_int(__xdrs, &__testxdr_silSetParamOut->iErrorId));
}

bool_t xdr_silLoadParamFromXML_in (XDR *__xdrs, sil_load_param_from_xml_in *__testxdr_silSetParamIn){
	return (xdr_uint8_t(__xdrs, &__testxdr_silSetParamIn->ucDummy));
}

bool_t xdr_silLoadParamFromXML_out (XDR *__xdrs, sil_load_param_from_xml_out *__testxdr_silSetParamOut){
	return (xdr_short(__xdrs, &__testxdr_silSetParamOut->sStatus) && xdr_int(__xdrs, &__testxdr_silSetParamOut->iErrorId));
}

bool_t xdr_testParameter_in (XDR *__xdrs, test_parameter_in *__testxdr_silSetParamIn){
    return (xdr_int(__xdrs, &__testxdr_silSetParamIn->iParamID) && xdr_double(__xdrs, &__testxdr_silSetParamIn->dParamValue)
    		&& xdr_double(__xdrs, &__testxdr_silSetParamIn->dParamValue1)
    		&& xdr_double(__xdrs, &__testxdr_silSetParamIn->dParamValue2)
    		&& xdr_double(__xdrs, &__testxdr_silSetParamIn->dParamValue3)
    		&& xdr_double(__xdrs, &__testxdr_silSetParamIn->dParamValue4)
    		&& xdr_int(__xdrs, &__testxdr_silSetParamIn->nestVAr.iVar1)
    		&& xdr_int(__xdrs, &__testxdr_silSetParamIn->nestVAr.iVar2));
};

bool_t xdr_testParameter_out (XDR *__xdrs, test_parameter_out *__testxdr_silSetParamOut){
	 return (xdr_short(__xdrs, &__testxdr_silSetParamOut->sStatus) && xdr_int(__xdrs, &__testxdr_silSetParamOut->iErrorId)
			 && xdr_double(__xdrs, &__testxdr_silSetParamOut->dParamValue)
			 && xdr_double(__xdrs, &__testxdr_silSetParamOut->dParamValue1)
			 && xdr_double(__xdrs, &__testxdr_silSetParamOut->dParamValue2)
			 && xdr_double(__xdrs, &__testxdr_silSetParamOut->dParamValue3)
			 && xdr_double(__xdrs, &__testxdr_silSetParamOut->dParamValue4));
};

bool_t xdr_readparam_in (XDR *__xdrs, sil_get_parameter_in *__testxdr_readParamIN){
    return (xdr_int(__xdrs, &__testxdr_readParamIN->iParmaId));
};

bool_t xdr_silGetParameterDouble_out (XDR *__xdrs, sil_get_parameter_double_out *__testxdr_readParamOUT){
	 return (xdr_double(__xdrs, &__testxdr_readParamOUT->dParmaValue)
			 && xdr_short(__xdrs, &__testxdr_readParamOUT->sStatus)
			 && xdr_int(__xdrs, &__testxdr_readParamOUT->iErrorId));
};

bool_t xdr_silGetParameterLong_out (XDR *__xdrs, sil_get_parameter_long_out *__testxdr_readParamOUT){
	 return (xdr_long(__xdrs, &__testxdr_readParamOUT->lParmaValue)
			 && xdr_short(__xdrs, &__testxdr_readParamOUT->sStatus)
			 && xdr_int(__xdrs, &__testxdr_readParamOUT->iErrorId));
};

bool_t xdr_silGetParameterInt_out (XDR *__xdrs, sil_get_parameter_int_out *__testxdr_readParamOUT){
	 return (xdr_int(__xdrs, &__testxdr_readParamOUT->iParmaValue)
			 && xdr_short(__xdrs, &__testxdr_readParamOUT->sStatus)
			 && xdr_int(__xdrs, &__testxdr_readParamOUT->iErrorId));
};

bool_t xdr_silGetParameteruInt_out (XDR *__xdrs, sil_get_parameter_uint_out *__testxdr_readParamOUT){
	 return (xdr_u_int(__xdrs, &__testxdr_readParamOUT->uiParmaValue)
			 && xdr_short(__xdrs, &__testxdr_readParamOUT->sStatus)
			 && xdr_int(__xdrs, &__testxdr_readParamOUT->iErrorId));
};

bool_t xdr_silGetParameterShort_out (XDR *__xdrs, sil_get_parameter_short_out *__testxdr_readParamOUT){
	 return (xdr_short(__xdrs, &__testxdr_readParamOUT->sParmaValue)
			 && xdr_short(__xdrs, &__testxdr_readParamOUT->sStatus)
			 && xdr_int(__xdrs, &__testxdr_readParamOUT->iErrorId));
};

bool_t xdr_silGetParameteruShort_out (XDR *__xdrs, sil_get_parameter_ushort_out *__testxdr_readParamOUT){
	 return (xdr_u_short(__xdrs, &__testxdr_readParamOUT->usParmaValue)
			 && xdr_short(__xdrs, &__testxdr_readParamOUT->sStatus)
			 && xdr_int(__xdrs, &__testxdr_readParamOUT->iErrorId));
};

bool_t xdr_silGetParameterChar_out (XDR *__xdrs, sil_get_parameter_char_out *__testxdr_readParamOUT){
	 return (xdr_int8_t(__xdrs, (int8_t *)&__testxdr_readParamOUT->cParmaValue)
			 && xdr_short(__xdrs, &__testxdr_readParamOUT->sStatus)
			 && xdr_int(__xdrs, &__testxdr_readParamOUT->iErrorId));
};

bool_t xdr_silGetParameterUChar_out (XDR *__xdrs, sil_get_parameter_uchar_out *__testxdr_readParamOUT){
	 return (xdr_uint8_t(__xdrs, &__testxdr_readParamOUT->ucParmaValue)
			 && xdr_short(__xdrs, &__testxdr_readParamOUT->sStatus)
			 && xdr_int(__xdrs, &__testxdr_readParamOUT->iErrorId));
};

bool_t xdr_silGetParameterBool_out (XDR *__xdrs, sil_get_parameter_bool_out *__testxdr_readParamOUT){
	 return (xdr_bool(__xdrs,(bool_t *)&__testxdr_readParamOUT->bParmaValue)
			 && xdr_short(__xdrs, &__testxdr_readParamOUT->sStatus)
			 && xdr_int(__xdrs, &__testxdr_readParamOUT->iErrorId));
};

bool_t xdr_silGetCompDate_in (XDR *__xdrs, sil_get_compilation_date_in *__testxdr_getcompilationIn){

	return (xdr_uint8_t(__xdrs, &__testxdr_getcompilationIn->ucDummy));
};

bool_t xdr_silGetCompDate_out (XDR *__xdrs, sil_get_compilation_date_out *__testxdr_getcompilationOut){

	 return (xdr_vector(__xdrs, __testxdr_getcompilationOut->str, 100,sizeof(char),(xdrproc_t)xdr_int8_t)
			 && xdr_short(__xdrs, &__testxdr_getcompilationOut->sStatus)
			 && xdr_int(__xdrs, &__testxdr_getcompilationOut->iErrorId));
};



bool_t xdr_silGetOverflow_in (XDR *__xdrs, sil_get_overflow_in *__testxdr_silSetParamIn){
	return (xdr_uint8_t(__xdrs, &__testxdr_silSetParamIn->ucDummy));
};

bool_t xdr_silGetOverflow_out (XDR *__xdrs, sil_get_overflow_out *__testxdr_readParamOUT){
	 return (xdr_long(__xdrs, &__testxdr_readParamOUT->lParmaValue)
			 && xdr_short(__xdrs, &__testxdr_readParamOUT->sStatus)
			 && xdr_int(__xdrs, &__testxdr_readParamOUT->iErrorId));
};


bool_t xdr_silGetTimeMeasurement_in (XDR *__xdrs, sil_get_TimeMeasurement_in *__testxdr_silSetParamIn){
	return (xdr_uint8_t(__xdrs, &__testxdr_silSetParamIn->ucDummy));
};

bool_t xdr_silGetTimeMeasurement_out (XDR *__xdrs, sil_get_TimeMeasurement_out *__testxdr_readParamOUT){
	 return (xdr_u_long(__xdrs, &__testxdr_readParamOUT->ulElapsedTime)
			 && xdr_u_long(__xdrs, &__testxdr_readParamOUT->ulMaxElapsedTime)
			 && xdr_u_long(__xdrs, &__testxdr_readParamOUT->ulAvgElapsedTime)
			 && xdr_long(__xdrs, &__testxdr_readParamOUT->lOverflow)
			 && xdr_short(__xdrs, &__testxdr_readParamOUT->sStatus)
			 && xdr_int(__xdrs, &__testxdr_readParamOUT->iErrorId));
};

bool_t xdr_silStopExe_in (XDR *__xdrs, sil_stop_exe_in *__testxdr_silSetParamIn){
	return (xdr_uint8_t(__xdrs, &__testxdr_silSetParamIn->ucDummy));
};

bool_t xdr_silStopExe_out (XDR *__xdrs, sil_stop_exe_out *__testxdr_readParamOUT){
	 return (xdr_short(__xdrs, &__testxdr_readParamOUT->sStatus)
			 && xdr_int(__xdrs, &__testxdr_readParamOUT->iErrorId));
};

bool_t xdr_silSaveLogExe_in (XDR *__xdrs, sil_save_log_in *__testxdr_silSetParamIn){
	return (xdr_uint8_t(__xdrs, &__testxdr_silSetParamIn->ucDummy));
};

bool_t xdr_silSaveLogExe_out (XDR *__xdrs, sil_stop_exe_out *__testxdr_readParamOUT){
	 return (xdr_short(__xdrs, &__testxdr_readParamOUT->sStatus)
			 && xdr_int(__xdrs, &__testxdr_readParamOUT->iErrorId));
};

bool_t xdr_silStartRec_in (XDR *__xdrs, sil_start_rec_in *__testxdr_silSetParamIn){
	return (xdr_uint8_t(__xdrs, &__testxdr_silSetParamIn->ucDummy));
};

bool_t xdr_silStartRec_out (XDR *__xdrs, sil_start_rec_out *__testxdr_readParamOUT){
	 return (xdr_short(__xdrs, &__testxdr_readParamOUT->sStatus)
			 && xdr_int(__xdrs, &__testxdr_readParamOUT->iErrorId));
};

bool_t xdr_silStopRec_in (XDR *__xdrs, sil_stop_rec_in *__testxdr_silSetParamIn){
	return (xdr_uint8_t(__xdrs, &__testxdr_silSetParamIn->ucDummy));
};

bool_t xdr_silStopRec_out (XDR *__xdrs, sil_stop_rec_out *__testxdr_readParamOUT){
	 return (xdr_short(__xdrs, &__testxdr_readParamOUT->sStatus)
			 && xdr_int(__xdrs, &__testxdr_readParamOUT->iErrorId));
};

bool_t xdr_silRecStat_in (XDR *__xdrs, sil_rec_stat_in *__testxdr_silSetParamIn){
	return (xdr_uint8_t(__xdrs, &__testxdr_silSetParamIn->ucDummy));
};
bool_t xdr_silRecStat_out (XDR *__xdrs, sil_rec_stat_out *__testxdr_readParamOUT){
	 return (xdr_uint8_t(__xdrs, &__testxdr_readParamOUT->ucParmaValue)
			 && xdr_short(__xdrs, &__testxdr_readParamOUT->sStatus)
			 && xdr_int(__xdrs, &__testxdr_readParamOUT->iErrorId));
};


//
bool_t xdr_intarr (XDR *__xdrs, char **chararrp){
	unsigned int len;
  	len = SIZE;
   	return (xdr_bytes(__xdrs, chararrp, &len, SIZE));
};
